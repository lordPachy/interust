---
title: "reading_dataset"
format: html
editor: visual
---

# Preliminary code

## Importing packages

```{r}
library(ggplot2)
library(igraph)
library(tidyverse)
library(data.table)
library(anytime)
library(poweRlaw)
library(scales)
library(DBI)
#install.packages("RSQLite")
library(RSQLite)
```

## Importing data

```{r}
data_dir = '/home/pachy/Desktop/ACSAI/interust/data/full/dumps/postgresql/data/'
files = list.files('/home/pachy/Desktop/ACSAI/interust/data/full/dumps/postgresql/data/')
#s = 'ciao.csv'
#str_sub(s, 1, -5)
for (f in files){
  table = read.csv(paste(data_dir, f, sep = ''))
  assign(str_sub(f, 1, -5), setDT(table))
}
identities = setDT(read.csv('/home/pachy/Desktop/ACSAI/interust/data/full/dumps/postgresql/data/identities.csv'))
users = setDT(read.csv('/home/pachy/Desktop/ACSAI/interust/data/full/dumps/postgresql/data/users.csv'))
repositories
```
## Importing DB through SQLite
```{r}
mydb = dbConnect(RSQLite::SQLite(), "/home/pachy/Desktop/ACSAI/interust/data/full/dumps/sqlite/rust_repos_2022_09_07_export.db")
dbGetQuery(mydb, 'SELECT * FROM followers')
```

# Cleaning data

## Users and identities

```{r}
identities
```

```{r}
users
```

```{r}
#| label: Merging on attributes
users_raw = merge.data.table(x = identities, y = users, by.x = 'user_id', by.y = 'id')
users_raw = unique(users_raw)
users_raw
```

Identities and users are the same (bots are the same):

```{r}
all.equal(users_raw$is_bot.x, users_raw$is_bot.y)
```

The attribute identity_types is essentially useless

```{r}
identity_types
```

Let's filter out useless attributes from users_id

```{r}
users_raw = users_raw[, c('identity_type_id', 'is_bot.y', 'creation_identity_type_id'):=NULL]
users_raw
```


Testing datetime formats

```{r}
#print.POSIXct <- function(x,...)print(format(x,"%Y-%m-%d %H:%M:%S"))
x <- user_id_raw[id == 8716]$created_at
x
x <- as.POSIXct(x, tz=Sys.timezone())
x
mode(x)
y = copy(user_id_raw)
y[, created_at := anytime(created_at)]
y
min(y$created_at, na.rm = TRUE)
```

Let's do it for real

```{r}
#| label: Clean user table
users_clean = users_raw[, created_at := anytime(created_at)]
users_clean
```


## Followers

```{r}
followers_raw = copy(followers)
followers_raw
```

```{r}
followers_clean = followers_raw[, follower_identity_type_id := NULL]
followers_clean = followers_raw[, created_at := NULL]
followers_clean[!is.na(follower_id)]
```


## Stars
```{r}
stars_row = copy(stars)
stars_row
```
Let's check if login and identity_id coincide:
```{r}
users_clean[identity == '668b00f5737f27d7c7d0fa67a1241acf']
```
A bit of cleaning:
```{r}
stars_clean = stars_row[, starred_at := anytime(starred_at)]
stars_clean[, identity_type_id := NULL]
stars_clean[is.na(identity_id)]
]
```

```{r}
all.equal(stars_clean$id, stars_clean$identity_id)
```

## Issues

```{r}
issues
issues_raw = copy(issues)
issues_raw
```
```{r}
issues_clean = issues_raw[, created_at := anytime(created_at)]
issues_clean = issues_clean[, closed_at := anytime(closed_at)]
issues_clean = issues_clean[, identity_type_id := NULL]
issues_clean[!is.na(author_id)]
```
## Issue reactions
```{r}
issue_reactions_raw = copy(issue_reactions)
issue_reactions_raw
```
```{r}
issue_reactions_clean = issue_reactions_raw[, created_at := anytime(created_at)]
issue_reactions_clean = issue_reactions_clean[, identity_type_id := NULL]
issue_reactions_clean[is.na(author_id)]
```
## Issue comments
```{r}
issue_comments_raw = copy(issue_comments)
issue_comments_raw
```
```{r}
issue_comments_clean = issue_comments_raw[, created_at := anytime(created_at)]
issue_comments_clean = issue_comments_clean[, identity_type_id := NULL]
issue_comments_clean
```
## Issue comment reactions
```{r}
issue_comment_reactions_raw = copy(issue_comment_reactions)
issue_comment_reactions_raw
```
```{r}
issue_comment_reactions_clean = issue_comment_reactions_raw[, created_at := anytime(created_at)]
issue_comment_reactions_clean = issue_comment_reactions_clean[, identity_type_id := NULL]
issue_comment_reactions_clean
```
## Commits

```{r}
commits_raw = copy(commits)
commits_raw
```
```{r}
commits_clean = commits_raw[, ':='(local_created_at = NULL,
                                   time_offset = NULL,
                                   original_created_at = NULL,
                                   local_committed_at = NULL,
                                   time_offset_committed = NULL,
                                   original_committed_at = NULL)]
commits_clean = commits_clean[, ':='(created_at = anytime(created_at),
                                     committed_at = anytime(committed_at))]
commits_clean = commits_clean[, sha := NULL]
commits_clean
```

## Commit comments
```{r}
commit_comments_raw = copy(commit_comments)
commit_comments_raw
```

```{r}
commit_comments_clean = commit_comments_raw[, created_at := anytime(created_at)]
commit_comments_clean = commit_comments_clean[, identity_type_id := NULL]
commit_comments_clean
```
## Commit comment reactions
```{r}
commit_comment_reactions_raw = copy(commit_comment_reactions)
commit_comment_reactions_raw
```
```{r}
commit_comment_reactions_clean = commit_comment_reactions_raw[, created_at := anytime(created_at)]
commit_comment_reactions_clean = commit_comment_reactions_clean[, identity_type_id := NULL]
commit_comment_reactions_clean
```
## Pull requests

```{r}
pull_requests_raw = copy(pullrequests)
pull_requests_raw
```
```{r}
pull_requests_clean = pull_requests_raw[, ':='(pullrequest_title = NULL,
                                             created_at = anytime(created_at),
                                             merged_at = anytime(merged_at),
                                             closed_at = anytime(closed_at),
                                             identity_type_id = NULL,
                                             inserted_at = anytime(inserted_at))]
pull_requests_clean
```
## Pull request reactions
```{r}
pull_request_reactions_raw = copy(pullrequest_reactions)
pull_request_reactions_raw
```
```{r}
pull_request_reactions_clean = pull_request_reactions_raw[, ':='(identity_type_id = NULL,
                                                               created_at = anytime(created_at))]
pull_request_reactions_clean
```
## Pull request comments 

```{r}
pull_request_comments_raw = copy(pullrequest_comments)
pull_request_comments_raw
```
```{r}
pull_request_comments_clean = pull_request_comments_raw[, ':='(created_at = anytime(created_at),
                                                             identity_type_id = NULL)]
pull_request_comments_clean
```

## Pull request comment reactions

```{r}
pull_request_comment_reactions_raw = copy(pullrequest_comment_reactions)
pull_request_comment_reactions_raw
```
```{r}
pull_request_comment_reactions_clean = pull_request_comment_reactions_raw[, ':='(
                                                             created_at = anytime(created_at),
                                                             identity_type_id = NULL)]
pull_request_comment_reactions_clean
```
## Repositories
```{r}
repositories_raw = copy(repositories)
repositories_raw
```
```{r}
repositories_clean = repositories_raw[, ':='(created_at = anytime(created_at),
                                             latest_commit_time = anytime(latest_commit_time)
                                             )]
repositories_clean
```
## Watchers
```{r}
watchers_raw = copy(watchers)
watchers_raw
```
```{r}
watchers_clean = watchers_raw[, identity_type_id := NULL]
watchers_clean
```

## Forks
```{r}
forks_raw = copy(forks)
forks_raw
```
```{r}
forks_clean = forks_raw[, ':='(forking_repo_id = NULL,
                               forked_at = anytime(forked_at)
                               )]
forks_clean
```
## Organization memberships

```{r}
org_memberships_raw = copy(org_memberships)
org_memberships_raw
```
```{r}
org_memberships_clean = org_memberships_raw[, ':='(
  joined_at = NULL,
  left_at = NULL
)]
org_memberships_clean
```
## URLs
```{r}
urls_clean = copy(urls)
urls_clean
```

## Packages
```{r}
packages_raw = copy(packages)
packages_raw
```

```{r}
packages_clean = packages_raw[, created_at := anytime(created_at)]
packages_clean
```
## Package versions
```{r}
package_versions_raw = copy(package_versions)
package_versions_raw
```
```{r}
package_versions_clean = package_versions_raw[, created_at := anytime(created_at)]
package_versions_clean
```

## Package version downloads

```{r}
package_version_downloads_clean = copy(package_version_downloads)
package_version_downloads_clean = package_version_downloads_clean[, downloaded_at := anytime(downloaded_at)]
package_version_downloads_clean[downloaded_at != anytime("2022-09-07")]

```


# Aggregating data

## Followers
### Number of followers

```{r}
n_followers = followers_clean[, .N, by = followee_id]
setnames(n_followers, c('N', 'followee_id'), c('n_followers', 'id'))
n_followers = n_followers[!is.na(id)]
n_followers
```
### Number of following

```{r}
n_following = followers_clean[, .N, by = follower_id]
setnames(n_following, c('follower_id', 'N'), c('id', 'n_following'))
n_following = n_following[!is.na(id)]
n_following
```

## Users on repositories
We can try to match users to repositories through commits.
```{r}
users_repos = unique(commits_clean[, .(author_id, repo_id)])
users_repos = users_repos[!is.na(author_id)]
users_repos
```


## Stars
### Put
```{r}
stars_clean
n_stars_put = stars_clean[, .N, by = identity_id]
setnames(n_stars_put, c('N', 'identity_id'), c('n_stars_put', 'id'))
n_stars_put = n_stars_put[!is.na(id)]
n_stars_put
```

### Received
```{r}
stars_per_repo = stars_clean[, .N, by = repo_id]
stars_per_repo
users_repos
stars_per_user = merge.data.table(
  x = users_repos,
  y = stars_per_repo,
  by.x = 'repo_id',
  by.y = 'repo_id'
)
n_stars_received = stars_per_user[, sum(N), by = author_id]
setnames(n_stars_received, c('author_id', 'V1'), c('id', 'n_stars_received'))
n_stars_received = n_stars_received[!is.na(id)]
n_stars_received
```

## Issues

### Posted by users

```{r}
issues_clean
n_issues_posted = issues_clean[, .N, by = author_id]
setnames(n_issues_posted, c('author_id', 'N'), c('id', 'n_issues_posted'))
n_issues_posted = n_issues_posted[!is.na(id)]
n_issues_posted
```
### Per repository
```{r}
n_issues_per_repo = issues_clean[, .N, by = repo_id]
setnames(n_issues_per_repo, 'N', 'n_issues_per_repo')
n_issues_per_repo
```
## Issue reactions
### Put
```{r}
n_issue_reactions_put= issue_reactions_clean[, .N, by = author_id]
setnames(n_issue_reactions_put, c('author_id', 'N'), c('id', 'n_issue_reactions_put'))
n_issue_reactions_put = n_issue_reactions_put[!is.na(id)]
n_issue_reactions_put
```
### Received
```{r}
#First, we count all the issues that have more than 0 reactions
reactions_per_issue = merge.data.table(
  x = issues_clean,
  y = issue_reactions_clean, 
  by.x = c('repo_id', 'issue_number'),
  by.y = c('repo_id', 'issue_number')
)
reaction_per_issue
n_issue_reactions_received = reaction_per_issue[, .N, by = author_id.x]
n_issue_reactions_received
setnames(n_issue_reactions_received, c('author_id.x', 'N'), c('id', 'n_issue_reactions_received'))
n_issue_reactions_received = n_issue_reactions_received[!is.na(id)]
n_issue_reactions_received
```
## Issue comments
### Posted
```{r}
n_issue_comments_posted= issue_comments_clean[, .N, by = author_id]
setnames(n_issue_comments_posted, c('author_id', 'N'), c('id', 'n_issue_comments_posted'))
n_issue_comments_posted = n_issue_comments_posted[!is.na(id)]
n_issue_comments_posted
```
### Received
```{r}
comments_per_issue = merge.data.table(
  x = issues_clean,
  y = issue_comments_clean, 
  by.x = c('repo_id', 'issue_number'),
  by.y = c('repo_id', 'issue_number'),
)
n_issue_comments_received = comments_per_issue[, .N, by = author_id.x]
setnames(n_issue_comments_received, c('author_id.x', 'N'), c('id', 'n_issue_comments_received'))
n_issue_comments_received = n_issue_comments_received[!is.na(id)]
n_issue_comments_received
```
## Issue comment reactions
### Put
```{r}
n_issue_comment_reactions_put= issue_comment_reactions_clean[, .N, by = author_id]
setnames(n_issue_comment_reactions_put, c('author_id', 'N'), c('id', 'n_issue_comment_reactions_put'))
n_issue_comment_reactions_put = n_issue_comment_reactions_put[!is.na(id)]
n_issue_comment_reactions_put
```
### Received
```{r}
reactions_per_issue_comment = merge.data.table(
  x = issue_comments_clean,
  y = issue_comment_reactions_clean, 
  by.x = c('repo_id', 'issue_number', 'comment_id'),
  by.y = c('repo_id', 'issue_number', 'comment_id')
)
reactions_per_issue_comment
n_issue_comment_reactions_received = reactions_per_issue_comment[, .N, by = author_id.x]
n_issue_comment_reactions_received
setnames(n_issue_comment_reactions_received, c('author_id.x', 'N'), c('id', 'n_issue_comment_reactions_received'))
n_issue_comment_reactions_received = n_issue_comment_reactions_received[!is.na(id)]
n_issue_comment_reactions_received
```

## Commits
```{r}
n_commits = commits_clean[, .N, by = author_id]
setnames(n_commits, c('author_id', 'N'), c('id', 'n_commits'))
n_commits = n_commits[!is.na(id)]
n_commits
```
## Commit comments
### Posted
```{r}
n_commit_comments_posted= commit_comments_clean[, .N, by = author_id]
setnames(n_commit_comments_posted, c('author_id', 'N'), c('id', 'n_commit_comments_posted'))
n_commit_comments_posted = n_commit_comments_posted[!is.na(id)]
n_commit_comments_posted
```
### Received
```{r}
comments_per_commit = merge.data.table(
  x = commits_clean,
  y = commit_comments_clean, 
  by.x = c('repo_id', 'id'),
  by.y = c('repo_id', 'commit_id'),
  all.x = T
)
comments_per_commit 
comments_per_commit
n_commit_comments_received = comments_per_commit[, .N, by = author_id.x]
setnames(n_commit_comments_received, c('author_id.x', 'N'), c('id', 'n_commit_comments_received'))
n_commit_comments_received = n_commit_comments_received[!is.na(id)]
n_commit_comments_received
```
## Commit comment reactions
### Put
```{r}
n_commit_comment_reactions_put= commit_comment_reactions_clean[, .N, by = author_id]
setnames(n_commit_comment_reactions_put, c('author_id', 'N'), c('id', 'n_commit_comment_reactions_put'))
n_commit_comment_reactions_put = n_commit_comment_reactions_put[!is.na(id)]
n_commit_comment_reactions_put
```
### Received
```{r}
reaction_per_commit_comment = merge.data.table(
  x = commit_comments_clean,
  y = commit_comment_reactions_clean, 
  by.x = c('repo_id', 'commit_id', 'comment_id'),
  by.y = c('repo_id', 'commit_id', 'comment_id')
)
reaction_per_commit_comment
n_commit_comment_reactions_received = reaction_per_commit_comment[, .N, by = author_id.x]
setnames(n_commit_comment_reactions_received, c('author_id.x', 'N'), c('id', 'n_commit_comment_reactions_received'))
n_commit_comment_reactions_received = n_commit_comment_reactions_received[!is.na(id)]
n_commit_comment_reactions_received
```
## Pull requests
```{r}
pull_requests_clean
n_pull_requests = pull_requests_clean[, .N, by = author_id]
setnames(n_pull_requests, c('author_id', 'N'), c('id', 'n_pull_requests'))
n_pull_requests = n_pull_requests[!is.na(id)]
n_pull_requests
```
## Pull request reactions
```{r}
pull_request_reactions_clean
```
### Put
```{r}
n_pull_request_reactions_put = pull_request_reactions_clean[, .N, by = author_id]
setnames(n_pull_request_reactions_put, c('author_id', 'N'), c('id', 'n_pull_request_reactions_put'))
n_pull_request_reactions_put = n_pull_request_reactions_put[!is.na(id)]
n_pull_request_reactions_put
```
### Received
```{r}
reaction_per_pull_request = merge.data.table(
  x = pull_requests_clean,
  y = pull_request_reactions_clean, 
  by.x = c('repo_id', 'pullrequest_number'),
  by.y = c('repo_id', 'pullrequest_number')
)
reaction_per_pull_request
n_pull_request_reactions_received = reaction_per_pull_request[, .N, by = author_id.x]
setnames(n_pull_request_reactions_received, c('author_id.x', 'N'), c('id', 'n_pull_request_reactions_received'))
n_pull_request_reactions_received = n_pull_request_reactions_received[!is.na(id)]
n_pull_request_reactions_received
```
## Pull request comments
```{r}
pull_request_comments_clean
```
### Posted
```{r}
n_pull_request_comments_posted = pull_request_comments_clean[, .N, by = author_id]
setnames(n_pull_request_comments_posted, c('author_id', 'N'), c('id', 'n_pull_request_comments_posted'))
n_pull_request_comments_posted = n_pull_request_comments_posted[!is.na(id)]
n_pull_request_comments_posted
```
### Received
```{r}
comments_per_pull_request = merge.data.table(
  x = pull_requests_clean,
  y = pull_request_comments_clean, 
  by.x = c('repo_id', 'pullrequest_number'),
  by.y = c('repo_id', 'pullrequest_number')
)
comments_per_pull_request
n_pull_request_comments_received = comments_per_pull_request[, .N, by = author_id.x]
setnames(n_pull_request_comments_received, c('author_id.x', 'N'), c('id', 'n_pull_request_comments_received'))
n_pull_request_comments_received = n_pull_request_comments_received[!is.na(id)]
n_pull_request_comments_received
```
## Pull request comment reactions
```{r}
pull_request_comment_reactions_clean
```
### Put
```{r}
n_pull_request_comment_reactions_put = pull_request_comment_reactions_clean[, .N, by = author_id]
setnames(n_pull_request_comment_reactions_put, c('author_id', 'N'), c('id', 'n_pull_request_comment_reactions_put'))
n_pull_request_comment_reactions_put = n_pull_request_comment_reactions_put[!is.na(id)]
n_pull_request_comment_reactions_put
```
### Received
```{r}
comment_reactions_per_pull_request = merge.data.table(
  x = pull_request_comments_clean,
  y = pull_request_comment_reactions_clean, 
  by.x = c('repo_id', 'pullrequest_number', 'comment_id'),
  by.y = c('repo_id', 'pullrequest_number', 'comment_id')
)
comment_reactions_per_pull_request
n_pull_request_comment_reactions_received = comment_reactions_per_pull_request[, .N, by = author_id.x]
setnames(n_pull_request_comment_reactions_received, c('author_id.x', 'N'), c('id', 'n_pull_request_comment_reactions_received'))
n_pull_request_comment_reactions_received = n_pull_request_comment_reactions_received[!is.na(id)]
n_pull_request_comment_reactions_received
```
## Watchers
```{r}
watchers_clean
```
### Watching
```{r}
n_repo_watched_per_user = watchers_clean[, .N, by = identity_id]
setnames(n_repo_watched_per_user, c('identity_id', 'N'), c('id', 'n_repo_watched_per_user'))
n_repo_watched_per_user = n_repo_watched_per_user[!is.na(id)]
n_repo_watched_per_user
```

### Watched
```{r}
n_being_watched_from = merge.data.table(
  x = users_repos,
  y = watchers_clean, 
  by.x = c('repo_id'),
  by.y = c('repo_id'),
  allow.cartesian = T
)
n_being_watched_from
n_being_watched_from = n_being_watched_from[, .N, by = author_id]
setnames(n_being_watched_from, c('author_id', 'N'), c('id', 'n_being_watched_from'))
n_being_watched_from = n_being_watched_from[!is.na(id)]
n_being_watched_from
```
## Forks
```{r}
forks_clean
```
## Organization memberships
```{r}
org_memberships_clean
sources
```
## Repo downloads
```{r}
packages_clean
package_versions_clean
package_version_downloads_clean
```

```{r}
# versions_per_package = merge.data.table(
#   x = packages_clean,
#   y = package_versions_clean,
#   by.x = c('id'),
#   by.y = c('package_id'),
# )
# versions_per_package
# downloads_per_package = merge.data.table(
#   x = package_versions_clean,
#   y = package_version_downloads_clean,
#   by.x = 'id',
#   by.y = 'package_version'
# )
# downloads_per_package
# downloads_per_repo = downloads_per_package[, .N, by = repo_id]
# n_being_watched_from = n_being_watched_from[, .N, by = author_id]
# setnames(n_being_watched_from, c('author_id', 'N'), c('id', 'n_being_watched_from'))
# n_being_watched_from = remove_missing(n_being_watched_from)
# n_being_watched_from
```
## Final score per user
```{r}
users_clean
setnames(users_clean, 'identity', 'login')
users_clean
n_followers
n_following
```

```{r}
n_followers
users_with_scores = merge.data.table(
  x = users_clean,
  y = n_followers,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_followers), n_followers := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_following,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_following), n_following := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_stars_put,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_stars_put), n_stars_put := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_stars_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_stars_received), n_stars_received := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issues_posted,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_issues_posted), n_issues_posted := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issue_reactions_put,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_issue_reactions_put), n_issue_reactions_put := 0]


users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issue_reactions_received,
  by.x = 'id',
  by.y = 'id', 
  all.x = T
)

users_with_scores[is.na(n_issue_reactions_received), n_issue_reactions_received := 0]


users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issue_comments_posted,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_issue_comments_posted), n_issue_comments_posted := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issue_comments_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_issue_comments_received), n_issue_comments_received := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issue_comment_reactions_put,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)
users_with_scores[is.na(n_issue_comment_reactions_put), n_issue_comment_reactions_put := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_issue_comment_reactions_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_issue_comment_reactions_received), n_issue_comment_reactions_received := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_commits,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_commits), n_commits := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_commit_comments_posted,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_commit_comments_posted), n_commit_comments_posted := 0]


users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_commit_comments_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_commit_comments_received), n_commit_comments_received := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_commit_comment_reactions_put,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_commit_comment_reactions_put), n_commit_comment_reactions_put := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_commit_comment_reactions_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_commit_comment_reactions_received), n_commit_comment_reactions_received := 0]

users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_requests,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_requests), n_pull_requests := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_request_reactions_put,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_request_reactions_put), n_pull_request_reactions_put := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_request_reactions_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_request_reactions_received), n_pull_request_reactions_received := 0]
```

```{r}
#| label: dai
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_request_comments_posted,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_request_comments_posted), n_pull_request_comments_posted := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_request_comments_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_request_comments_received), n_pull_request_comments_received := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_request_comment_reactions_put,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_request_comment_reactions_put), n_pull_request_comment_reactions_put := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_pull_request_comment_reactions_received,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_pull_request_comment_reactions_received), n_pull_request_comment_reactions_received := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_repo_watched_per_user,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_repo_watched_per_user), n_repo_watched_per_user := 0]
users_with_scores = merge.data.table(
  x = users_with_scores,
  y = n_being_watched_from,
  by.x = 'id',
  by.y = 'id',
  all.x = T
)

users_with_scores[is.na(n_being_watched_from), n_being_watched_from := 0]

```
```{r}
#| label: creating aggregate scores

users_aggregate = users_with_scores[, ':='(social_popularity =
                                          n_followers +
                                          n_stars_received +
#                                          n_issue_reactions_received,
#                                          n_issue_comment_reactions_received,
#                                          n_commit_comment_reactions_received,
#                                          n_pull_request_reactions_received,
#                                          n_pull_request_comment_reactions_received,
                                          n_being_watched_from,
                                      social_activity =
                                          n_following +
                                          n_stars_put +
#                                          n_issue_reactions_put,
#                                          n_issue_comment_reactions_put,
#                                          n_commit_comment_reactions_put,
#                                          n_pull_request_reactions_put,
#                                          n_pull_request_comment_reactions_put,
                                          n_repo_watched_per_user,
#                                      working_popularity = 
#                                        sum(n_issue_comments_received,
#                                            n_commit_comments_received,
#                                            n_pull_request_comments_received),
                                      working_activity = 
                                            n_issues_posted +
                                            n_issue_comments_posted +
                                            n_commit_comments_posted +
                                            n_pull_request_comments_posted +
                                            n_commits +
                                            n_pull_requests)]
users_aggregate = users_aggregate[social_popularity > 10 & social_activity > 10 & working_activity > 10 & is_bot.x == 'f']
users_aggregate
```

## Let's try to open the preprocessed CSV
```{r}
read.csv()
```

# Exploring distributions
##Basic info
```{r}
users_with_scores[is.na(user_id)]
summary(users_with_scores)
```

## Regression on various scores
```{r}
lm = lm(formula = n_stars_received ~ 
#          n_following
#        + n_stars_put 
#        + n_stars_received 
#        + n_issues_posted 
#        + n_issue_reactions_put 
#        + n_issue_reactions_received 
#        + n_issue_comments_posted 
#        + n_issue_comments_received
#        + n_issue_comment_reactions_put 
#        + n_issue_comment_reactions_received  
#        + n_commit_comments_posted 
#        + n_commit_comments_received, 
#        + n_commit_comment_reactions_put 
#        + n_commit_comment_reactions_received 
          n_commits, 
#        + n_pull_request_reactions_put 
#        + n_pull_request_reactions_received 
#        + n_pull_request_comments_posted 
#        + n_pull_request_comments_received 
#        + n_pull_request_comment_reactions_put 
#        + n_pull_request_comment_reactions_received 
#        + n_being_watched_from, 
#        + n_repo_watched_per_user,
        data = users_with_scores)
summary(lm)
```
```{r}
lm = lm(formula = n_commit_comments_posted ~ n_commit_comment_reactions_received, data = users_with_scores)
summary(lm)
```
# Most working active users are the ones that are more followed
```{r}
x = 10:10000
df = data.frame(x)
```

```{r}
ggplot(users_aggregate) + geom_point(aes(working_activity, social_popularity)) + scale_y_continuous(trans = 'log10') + scale_x_continuous(trans = 'log10')
```




## Users

Let's see how many bots we have

```{r}
ggplot(user_id_raw, aes(x = is_bot)) + geom_bar()
```

Not so many.

Let's see how many creation dates we have

```{r}
created_or_generated = copy(user_id_raw)
created_or_generated[, birthdate_unknown := created_at=='']
created_or_generated
ggplot(created_or_generated, aes(x = birthdate_unknown)) + geom_bar()
```

```{r}
ggplot(user_id_raw, aes(x = year(created_at))) + geom_bar()
```


## Stars
Let's see how many stars do they put:
```{r}
user_stars_nobot = user_stars[is_bot == F]
user_stars_nobot = user_stars[, .N, by = identity]
user_stars_nobot
ggplot(user_stars_nobot[N<2000], aes(x = N)) + geom_density() + scale_y_continuous(trans = 'log10') + scale_x_continuous(trans = 'log10')
```
Let's change the visualization:
```{r}
t = new_transform(name = 'x', function(x) log(x, base = exp(1)), function(x) exp(x))
ggplot(user_stars_nobot[N<2000], aes(x = N)) + geom_density() + scale_y_continuous(trans = t)
```

Let's try to fit a power law:
```{r}
#| label: Power law fitting
user_stars_nobot
m = displ$new(user_stars_nobot$N)
est = estimate_xmin(m)
est
m$setXmin(est)
bootstrap_p(m, no_of_sims = 10, threads = 4)
```

### Old data

```{r}
follower_degree = followers_aggr[, .N, by = followee_id]
#follower_degree = follower_degree[N > 486]
ggplot(follower_degree, aes(x = N)) + geom_bar(width = 1000) + scale_y_continuous(trans = 'log10')
```

Let's check if it fits a power law distribution:

```{r}
#| label: Power law fitting
m_m = displ$new(follower_degree$N)
est = estimate_xmin(m_m)
est
```

```{r}
#| label: Power law fitting
m_m$setXmin(est)
plot(m_m)
lines(m_m, col = 2)
```

Let's see if it fits:
```{r}
#| label: Power law fitting
parallel::detectCores()
bs = bootstrap_p(m_m, no_of_sims = 10, threads = 2)
bs
```
## Stars
Let's see how many stars do they put:
```{r}
user_stars_nobot = user_stars[is_bot == F]
user_stars_nobot = user_stars[, .N, by = identity]
user_stars_nobot
ggplot(user_stars_nobot[N<2000], aes(x = N)) + geom_density() + scale_y_continuous(trans = 'log10') + scale_x_continuous(trans = 'log10')
```
Let's change the visualization:
```{r}
t = new_transform(name = 'x', function(x) log(x, base = exp(1)), function(x) exp(x))
ggplot(user_stars_nobot[N<2000], aes(x = N)) + geom_density() + scale_y_continuous(trans = t)
```

Let's try to fit a power law:
```{r}
#| label: Power law fitting
user_stars_nobot
m = displ$new(user_stars_nobot$N)
est = estimate_xmin(m)
est
m$setXmin(est)
bootstrap_p(m, no_of_sims = 10, threads = 4)
```

# Network analysis
## Followers' degree distribution

```{r}
ggplot(data = users_aggregate) + geom_density(aes(n_followers))+ scale_y_continuous(trans = 'log10') + scale_x_continuous(trans = 'log10')
```
```{r}
follower_degree = followers_aggr[, .N, by = followee_id]
#follower_degree = follower_degree[N > 486]
ggplot(follower_degree, aes(x = N)) + geom_bar(width = 1000) + scale_y_continuous(trans = 'log10')
```

Let's check if it fits a power law distribution:

```{r}
#| label: Power law fitting
m_m = displ$new(users_aggregate[n_followers>30 & n_followers < 8000]$n_followers)
est = estimate_xmin(m_m)
est
```

```{r}
#| label: Power law fitting
m_m$setXmin(est)
plot(m_m)
lines(m_m, col = 2)
```

Let's see if it fits:
```{r}
#| label: Power law fitting
parallel::detectCores()
bs = bootstrap_p(m_m, no_of_sims = 10, threads = 2)
bs
```
## Network representation
```{r}
users_repos
users_on_users = merge.data.table(
  x = users_repos,
  y = users_repos,
  by = 'repo_id',
  allow.cartesian = T
)

v= c('author_id.x', 'author_id.y')
users_on_users
users = users_on_users[author_id.x != author_id.y, ..v]
users
```


```{r}
edges = data.frame("from" = users$author_id.x, "to" = users$author_id.y, stringsAsFactors = F )
g <- graph.data.frame(edges, directed = F)
g

V(g)[name %in% edges[, 2] & 'r' %in% edges[, 2]]
V(g)$type <- V(g)$name[0] =='r'
```
```{r}
V(g)$color <- V(g)$type
V(g)$color=gsub("FALSE","red",V(g)$color)
V(g)$color=gsub("TRUE","blue",V(g)$color)
pdf("/home/pachy/Desktop/ACSAI/interust/user_interactions/plots/user_repo_bipartite.pdf")
V(g)$color <- ifelse(V(g)$type, "lightblue", "salmon")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "lightgray"
plot(g, vertex.label.cex = 0.2, 
     vertex.label.color = "black",
     vertex.label = "NA",
     edge.width=0.5,
     edges.size = 0.1,
     vertex.size = 0.1,
     edge.lty = 2,
     edge.curved = TRUE,
     layout=layout_as_bipartite)
```
```{r}
as_adjacency_matrix(g)
plot(degree_distribution(g))
df = data.frame(x = 1:108777, y = degree_distribution(g))
df
ggplot(data = df, aes(x, y)) + geom_point() + scale_y_continuous(trans = 'log10') + scale_x_continuous(trans = 'log10')
```


